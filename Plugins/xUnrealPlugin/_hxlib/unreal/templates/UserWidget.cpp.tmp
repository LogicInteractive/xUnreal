#include "{className}.h"

{$head}

void {$prefix}{className}::NativeConstruct()
{
	Super::NativeConstruct();

    if (hxInst)
        {$hxMainClass}_releaseHaxeObject(hxInst); 

	if (!hxInst)
    {
        hxInst = {$hxMainClass}{$packagePath}_{className}_new();
        {$hxMainClass}_unreal_UWidget_setOwner(hxInst, this);
    }

    if (hxInst)
        {$hxMainClass}_unreal_UserWidget_NativeConstruct(hxInst);
}

void {$prefix}{className}::NativeOnInitialized()
{
	Super::NativeOnInitialized();

    if (hxInst)
    {
        {$hxMainClass}_unreal_UserWidget_NativeOnInitialized(hxInst);
    }
}

void {$prefix}{className}::NativePreConstruct()
{
	Super::NativePreConstruct();

    if (hxInst)
    {
        {$hxMainClass}_unreal_UserWidget_NativePreConstruct(hxInst);
    }
}

void {$prefix}{className}::NativeDestruct()
{
	Super::NativeDestruct();

    if (hxInst)
    {
        {$hxMainClass}_unreal_UserWidget_NativeDestruct(hxInst);
    }
}

void {$prefix}{className}::NativeTick(const FGeometry& MyGeometry, float InDeltaTime)
{
	Super::NativeTick(MyGeometry,InDeltaTime);

    if (hxInst)
    {
        {$hxMainClass}_unreal_UserWidget_NativeTick(hxInst,InDeltaTime);
    }
}

int32 {$prefix}{className}::NativePaint(const FPaintArgs &Args, const FGeometry &AllottedGeometry, const FSlateRect &MyCullingRect, FSlateWindowElementList &OutDrawElements, int32 LayerId, const FWidgetStyle &InWidgetStyle, bool bParentEnabled) const
{
    Super::NativePaint(Args, AllottedGeometry, MyCullingRect,  OutDrawElements, LayerId, InWidgetStyle, bParentEnabled);
    FPaintContext* Context = new FPaintContext(AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled);
    // UWidgetBlueprintLibrary::DrawLines(Context, Points, FLinearColor::Blue, true, 10.0f);   
    // return LayerId + 1;
    if (hxInst)
    {
        {$hxMainClass}_unreal_UserWidget_NativePaint(hxInst,Context);
    }
    delete Context;
    return LayerId + 1;
}

{$exposedMethods}
